def print_head(head)
  puts "\n"
  puts head.center(20, '-')
end


print_head 'Fixnum'

# Метод, возвращающий вещественный результат от деления
p 6 / 2 # => 3
p 6.div(2) # => 3
p 5 / 3 # => 1
p 5.0 / 3 # => 1.6666666666666667
p 5.div(3) # => 1
p 5.0.div(3) # => 1
p 5.fdiv(3) # => 1.6666666666666667

# Метод проверяющий, является ли число нечётным
p 4.odd? # => false
p 3.odd? # => true


print_head 'Integer'

# Метод, возвращающий Наибольший Общий Делитель 2-х чисел
p 45.gcd(10) # => 5

# Метод, позволяющий итерировать от одного числа до другого
3.downto(1) { |n| print n, '.. ' } # => 3.. 2.. 1..
puts "\n"
5.upto(8) { |n| print n**2, '/' } # => 25/36/49/64/
puts "\n"

# Метод приведения целого числа к рациональному
p 5.rationalize # => (5/1)
p 3.2.rationalize # => (16/5)


print_head 'Numeric'

# Метод, позволяющий итерировать от данного целого числа с указанием шага итерации и числа верхнего предела итерации
1.step(by: 2, to: 10) { |n| print n, ' ' } # => 1 3 5 7 9
puts "\n"

# Метод, приводящий данное число к комплексному (мнимому)
p 2.to_c # => (2+0i)
p 2.i # => (0+2i)


print_head 'Float'

# Метод, приводящий вещественное число к строке
p 1.2.to_s # => "1.2"


print_head 'Array'

ar = [1, 2, 3]

# Метод, возвращающий последний элемент из массива (с его извлечением из массива)
p ar.pop # => 3
p ar # => [1, 2]

# Метод, добавляющий элемент в конец массива
p ar.push(3) # => [1, 2, 3]
p ar << 4 # => [1, 2, 3, 4]


print_head 'Hash'

hash = { color: :green, model: 'NC700', quantity: 19 }

# Метод, возвращающий массив ключей хэша
p hash.keys # => [:color, :model, :quantity]

# Метод, возвращающий массив значений хэша
p hash.values # => [:green, "NC700", 19]


print_head 'Range'

# Метод, проверяющий, включено ли последнее значение в диапазон
p (1..3).exclude_end? # => false
p (1...3).exclude_end? # => true