def print_head(head)
  puts "\n"
  puts "*** #{head} ***"
end


print_head 'Fixnum'

# Метод, увеличивающий число на единицу
p 123.next # => 124

# Метод проверяющий является ли число нулём
p 123.zero? # => false
p 0.zero? # => true

# Метод возвращающий модуль числа
p 123.abs # => 123
p -123.abs # => 123


print_head 'Float'

# Метод, округляющий вещественное число вниз до целой части
p 1.8.floor # => 1
p -1.8.floor # => -2

# Метод, возвращающий результат деления 2-х чисел в виде массива с целой частью и остатком от деления
p 8.5.divmod(3) # => [2, 2.5]


print_head 'String'

# Метод, приводящий все символы в строке к нижнему регистру
p 'AbCdEf'.downcase # => "abcdef"
p 'Не РаБоТаЕт'.downcase # => "Не РаБоТаЕт"

# Метод, возвращающий следующий символ за текущим (согласно кодам ASCII)
p 'a'.next # => "b"

# Метод изменяющий текущий объект строки, путём удаления предшествующих и завершающих пробельных символов
str = ' a '
str.strip!
p str # => "a"


print_head 'Array'

ar = %w(голова шея рука рука спина грудь пупок попа нога нога)

# Метод, удаляющий все встречающиеся элементы в массиве равные заданному
ar.delete('рука')
p ar # => ["голова", "шея", "спина", "грудь", "пупок", "попа", "нога", "нога"]

# Метод, возвращающий текущий массив с элементами в случайном порядке
p ar.shuffle # ~> ["нога", "нога", "грудь", "попа", "шея", "спина", "пупок", "голова"]

# Метод, превращающий массив в строку путём объединения его элементов
p ar.join(', ') # => "голова, шея, спина, грудь, пупок, попа, нога, нога"


print_head 'Hash'

animals = {cat: 'meow', cow: 'moo', sheep: 'baa'}
birds = {duck: 'quack-quack', cuckoo: 'cuckoo'}

# Метод, проверяющий наличие заданного ключа в хэше
p animals.has_key?(:cow) # => true
p animals.has_key?(:dog) # => false

# Метод, объединяющий 2 объекта хэшей
p animals.merge(birds) # => {:cat=>"meow", :cow=>"moo", :sheep=>"baa", :duck=>"quack-quack", :cuckoo=>"cuckoo"}


print_head 'Range'

# Метод, возвращающий максимальное значение диапазона
p (2..17).max # => 17